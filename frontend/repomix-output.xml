This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
public/vite.svg
README.md
src/App.css
src/App.tsx
src/assets/react.svg
src/components/CollapsibleSection.tsx
src/components/EnvironmentSettings.tsx
src/components/ErrorMessage.tsx
src/components/Gallery.tsx
src/components/GenerationButton.tsx
src/components/ImageViewer.tsx
src/components/LoadingIndicator.tsx
src/components/ModelSettings.tsx
src/components/ThemeToggle.tsx
src/components/VisualOptionSelector.tsx
src/index.css
src/main.tsx
src/services/api.ts
src/utils/themeUtils.ts
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI Fashion Image Generator</title>
    <!-- Dark mode initialization script to prevent flash of wrong theme -->
    <script>
      // Check for saved theme preference or use the system preference
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

      // Apply dark mode if needed
      if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    </script>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.1.1",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@tailwindcss/cli": "^4.1.1",
    "@tailwindcss/postcss": "^4.1.1",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.1",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.24.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  }
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/App.tsx">
import { useState, useCallback, useEffect } from 'react';

// Import Components
import ModelSettings, { ModelSettingsState } from './components/ModelSettings';
import EnvironmentSettings, { EnvironmentSettingsState } from './components/EnvironmentSettings';
import GenerationButton from './components/GenerationButton';
import ImageViewer from './components/ImageViewer';
import Gallery from './components/Gallery';
import LoadingIndicator from './components/LoadingIndicator';
import ErrorMessage from './components/ErrorMessage';
import ThemeToggle from './components/ThemeToggle';
import { generateImage } from './services/api';
import { initializeTheme } from './utils/themeUtils';

// Get the backend URL from environment variables (Vite specific)
// Fallback to localhost for local development
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001';

// LocalStorage key
const GALLERY_STORAGE_KEY = 'aiFashionGallery_v1';
const MAX_GALLERY_ITEMS = 20; // As per PRD

// --- Upload Constants ---
const MAX_FILE_SIZE_MB = 10;
const MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024;
const ACCEPTED_FORMATS = ['image/jpeg', 'image/png', 'image/webp'];
const ACCEPTED_FORMATS_STRING = ACCEPTED_FORMATS.join(',');

function App() {
  // --- State Management ---
  const [uploadedImageData, setUploadedImageData] = useState<string | null>(null);
  const [modelSettings, setModelSettings] = useState<ModelSettingsState | null>(null); // Initialize later
  const [environmentSettings, setEnvironmentSettings] = useState<EnvironmentSettingsState | null>(null); // Initialize later
  // State stores the *relative* path from the backend or localStorage
  const [generatedImageRelativePath, setGeneratedImageRelativePath] = useState<string | null>(null);
  // State stores the list of *relative* paths from localStorage
  const [galleryImageRelativePaths, setGalleryImageRelativePaths] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [generatedPrompt, setGeneratedPrompt] = useState<string | null>(null); // State for the prompt
  // --- Upload State (moved from ImageUploader) ---
  const [isDragging, setIsDragging] = useState(false);
  const [uploadError, setUploadError] = useState<string | null>(null);
  // --- Responsive UI State ---
  const [isSettingsPanelOpen, setIsSettingsPanelOpen] = useState<boolean>(false);

  // Initialize theme on component mount
  useEffect(() => {
    initializeTheme();
  }, []);

  // --- Load Gallery from localStorage on initial mount ---
  useEffect(() => {
    try {
      const storedGallery = localStorage.getItem(GALLERY_STORAGE_KEY);
      if (storedGallery) {
        const parsedUrls: string[] = JSON.parse(storedGallery);
        // Basic validation if needed (e.g., check if it's an array of strings)
        // Ensure stored data is an array of strings (relative paths)
        if (Array.isArray(parsedUrls) && parsedUrls.every(item => typeof item === 'string' && item.startsWith('/'))) {
             setGalleryImageRelativePaths(parsedUrls);
             // Optionally display the latest image from the gallery on load
             if (parsedUrls.length > 0) {
                setGeneratedImageRelativePath(parsedUrls[0]); // Set the relative path
             }
        } else {
            console.warn("Invalid gallery data found in localStorage. Resetting.");
            localStorage.removeItem(GALLERY_STORAGE_KEY);
        }
      }
    } catch (error) {
        console.error("Failed to load gallery from localStorage:", error);
        // Optionally clear corrupted data
        localStorage.removeItem(GALLERY_STORAGE_KEY);
    }
  }, []); // Empty dependency array ensures this runs only once on mount

  // --- Callback Handlers ---
  const handleImageUpload = useCallback((imageData: string | null) => {
    setUploadedImageData(imageData);
    setErrorMessage(null); // Clear generation error on new upload
    setUploadError(null); // Clear upload error on new upload
    // Clear generated image view and prompt if a new image is uploaded
    setGeneratedImageRelativePath(null);
    setGeneratedPrompt(null);
  }, []);

  const handleModelSettingsChange = useCallback((settings: ModelSettingsState) => {
    setModelSettings(settings);
  }, []);

  const handleEnvironmentSettingsChange = useCallback((settings: EnvironmentSettingsState) => {
    setEnvironmentSettings(settings);
  }, []);

  const handleGenerateClick = useCallback(async () => {
    if (!uploadedImageData || !modelSettings || !environmentSettings) {
      setErrorMessage('Please upload an image and ensure all settings are selected.');
      return;
    }

    setIsLoading(true);
    setErrorMessage(null);
    setGeneratedImageRelativePath(null); // Clear previous image while generating
    setGeneratedPrompt(null); // Clear previous prompt

    const payload = {
      settings: { modelSettings, environmentSettings },
      imageData: uploadedImageData,
    };

    console.log("Sending payload to backend:", payload);

    // --- API Interaction (Item 3.97) ---
    try {
      // Call the API service - it now returns an object { imageUrl, promptUsed }
      const { imageUrl: imageRelativePath, promptUsed } = await generateImage(payload);
      console.log("API Success. Image Relative Path:", imageRelativePath);
      console.log("API Success. Prompt Used:", promptUsed); // Log the received prompt
      setGeneratedImageRelativePath(imageRelativePath); // Store the relative path
      setGeneratedPrompt(promptUsed); // Store the prompt

      // --- Update Gallery & localStorage ---
      // Store relative paths in state and localStorage
      setGalleryImageRelativePaths(prevPaths => {
        const newPaths = [imageRelativePath, ...prevPaths].slice(0, MAX_GALLERY_ITEMS); // Add relative path
        try {
          localStorage.setItem(GALLERY_STORAGE_KEY, JSON.stringify(newPaths)); // Save relative paths
        } catch (storageError) {
          console.error("Failed to save gallery to localStorage:", storageError);
          setErrorMessage("Generated image displayed, but failed to save to local gallery.");
        }
        return newPaths;
      });

    } catch (error) {
      console.error("Generation API Error:", error);
      // Set the error message from the caught error
      if (error instanceof Error) {
        setErrorMessage(error.message);
      } else {
        setErrorMessage('An unknown error occurred during image generation.');
      }
    } finally {
      setIsLoading(false);
    }

  }, [uploadedImageData, modelSettings, environmentSettings]); // Dependencies for the generation logic

  const handleThumbnailClick = useCallback((url: string) => {
    // url here is the full URL constructed by the Gallery component mapping
    // We need to extract the relative path to set the state correctly
    try {
        const urlObject = new URL(url);
        const relativePath = urlObject.pathname; // Extracts path like /images/uuid.jpg
        setGeneratedImageRelativePath(relativePath); // Set the relative path state
        setGeneratedPrompt(null); // Clear prompt when selecting from gallery (it wasn't saved with gallery items)
    } catch (e) {
        console.error("Invalid URL clicked in gallery:", url, e);
        setErrorMessage("Could not display the selected gallery image.");
        setGeneratedImageRelativePath(null);
        setGeneratedPrompt(null);
    }
    setErrorMessage(null); // Clear any previous errors
  }, []);

  const handleDismissError = useCallback(() => {
    setErrorMessage(null);
    setUploadError(null); // Also clear upload error
  }, []);

  const toggleSettingsPanel = useCallback(() => {
    setIsSettingsPanelOpen(prev => !prev);
  }, []);

  const handleClearGallery = useCallback(() => {
    // Clear gallery from state and localStorage
    setGalleryImageRelativePaths([]);
    localStorage.removeItem(GALLERY_STORAGE_KEY);
  }, []);

  // --- Upload Logic (moved from ImageUploader) ---
  const processFile = useCallback((file: File | null) => {
    setUploadError(null); // Clear previous errors

    if (!file) {
        handleImageUpload(null); // Clear image data in parent if file is null
        return;
    }

    // Validate file type
    if (!ACCEPTED_FORMATS.includes(file.type)) {
      setUploadError(`Invalid format. Use ${ACCEPTED_FORMATS.map(f => f.split('/')[1]).join(', ')}.`);
      handleImageUpload(null);
      return;
    }

    // Validate file size
    if (file.size > MAX_FILE_SIZE_BYTES) {
      setUploadError(`File too large. Max ${MAX_FILE_SIZE_MB}MB.`);
      handleImageUpload(null);
      return;
    }

    // Read file as Data URL
    const reader = new FileReader();
    reader.onloadend = () => {
      const base64String = reader.result as string;
      handleImageUpload(base64String); // Pass base64 data up
      setUploadError(null); // Clear error on success
    };
    reader.onerror = () => {
      setUploadError('Failed to read file.');
      handleImageUpload(null);
    };
    reader.readAsDataURL(file);
  }, [handleImageUpload]); // Include handleImageUpload dependency

  const handleFileChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    processFile(file || null);
    // Reset input value to allow uploading the same file again
    event.target.value = '';
  }, [processFile]);

  const handleDragOver = useCallback((event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    setIsDragging(true);
  }, []);

  const handleDragLeave = useCallback((event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    // Only set dragging to false if leaving the actual drop zone, not its children
    if (event.currentTarget.contains(event.relatedTarget as Node)) {
        return;
    }
    setIsDragging(false);
  }, []);

  const handleDrop = useCallback((event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    setIsDragging(false);
    const file = event.dataTransfer.files?.[0];
    processFile(file || null);
  }, [processFile]);

  const handleClearUpload = useCallback(() => {
    processFile(null); // This calls handleImageUpload(null) and clears errors
    // No need to clear generated image/prompt here, handleImageUpload already does it
    // Ensure the hidden file input is cleared if needed, though processFile(null) should suffice
    const fileInput = document.getElementById('fileInput') as HTMLInputElement;
    if (fileInput) {
        fileInput.value = '';
    }
  }, [processFile]);
  // --- End Upload Logic ---

  // Determine if generate button should be disabled
  const isGenerateDisabled = !uploadedImageData || isLoading;

  return (
    <div className="min-h-screen bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 flex flex-col transition-colors duration-200">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 shadow-md p-4 sticky top-0 z-10 transition-colors duration-200">
        <div className="flex justify-between items-center max-w-7xl mx-auto">
          <h1 className="text-xl sm:text-2xl font-bold text-primary-600 dark:text-primary-400 transition-colors duration-200">
            AI Fashion Image Generator
          </h1>
          <ThemeToggle />
        </div>
      </header>

      {/* Main Content Area */}
      <main className="flex-grow p-4 sm:px-6 lg:px-8 grid grid-cols-1 md:grid-cols-12 gap-6"> {/* Removed container mx-auto, added padding */}

        {/* Settings Panel (Left Column - takes 3/12) */}
        <section className="md:col-span-3 lg:max-w-sm bg-white dark:bg-gray-800 p-4 rounded shadow flex flex-col space-y-4 self-start md:sticky top-[calc(4rem+1rem)] transition-colors duration-200">
          <div className="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2">
            <h2 className="text-xl font-semibold">Settings</h2>
            {/* Mobile toggle button */}
            <button
              className="md:hidden text-gray-500 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
              onClick={toggleSettingsPanel}
              aria-expanded={isSettingsPanelOpen}
              aria-controls="settings-panel"
            >
              {isSettingsPanelOpen ? (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                </svg>
              ) : (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              )}
            </button>
          </div>

          {/* Settings content - collapsible on mobile */}
          <div id="settings-panel" className={`${isSettingsPanelOpen ? 'block' : 'hidden md:block'} space-y-4 animate-fade-in`}>
            {handleModelSettingsChange && <ModelSettings onChange={handleModelSettingsChange} />}
            {handleEnvironmentSettingsChange && <EnvironmentSettings onChange={handleEnvironmentSettingsChange} />}
            <div className="mt-auto pt-4"> {/* Push button to bottom */}
              <GenerationButton
                  onClick={handleGenerateClick}
                  isLoading={isLoading}
                  isDisabled={isGenerateDisabled}
              />
            </div>
          </div>
        </section>

        {/* Comparison Area (Center/Right Columns - takes 9/12) */}
        <section className="md:col-span-9 bg-white dark:bg-gray-800 p-4 rounded shadow flex flex-col transition-colors duration-200">
            <h2 className="text-xl font-semibold mb-3 border-b border-gray-200 dark:border-gray-700 pb-2 w-full">Comparison</h2>
            {/* Grid for side-by-side images */}
            <div className="flex-grow grid grid-cols-1 lg:grid-cols-2 gap-4 relative min-h-[400px] lg:min-h-[500px]"> {/* Changed md: to lg: for better tablet experience */}

              {/* Original Image Area (Now includes Upload) */}
              <div className="border border-gray-200 dark:border-gray-700 rounded p-4 flex flex-col items-center justify-center bg-gray-50 dark:bg-gray-800 relative group min-h-[300px] sm:min-h-[350px] md:min-h-[400px] lg:min-h-[500px] transition-colors duration-200">
                 <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-3 w-full text-center transition-colors duration-200">Original</h3>
                 {/* Hidden File Input */}
                 <input
                    id="fileInput"
                    type="file"
                    accept={ACCEPTED_FORMATS_STRING}
                    onChange={handleFileChange}
                    className="hidden"
                 />
                 {/* Drop Zone / Display Area - Takes full space */}
                 <div
                    className={`absolute inset-0 flex items-center justify-center overflow-hidden p-1 rounded-md cursor-pointer border-2 border-dashed flex-grow
                                ${isDragging ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/30' : 'border-gray-200 dark:border-gray-700 hover:border-gray-400 dark:hover:border-gray-500'}
                                ${uploadedImageData ? 'border-transparent hover:border-gray-400 dark:hover:border-gray-500' : ''}
                                transition-all duration-200 ease-in-out`}
                    onDragOver={handleDragOver}
                    onDragLeave={handleDragLeave}
                    onDrop={handleDrop}
                    onClick={() => !uploadedImageData && document.getElementById('fileInput')?.click()} // Only allow click to upload if no image
                 >
                   {uploadedImageData ? (
                     <img src={uploadedImageData} alt="Original Upload" className="max-w-full max-h-full object-contain rounded shadow-sm"/>
                   ) : (
                     <div className="text-center text-gray-500 dark:text-gray-400 p-4 transition-colors duration-200">
                        {/* Upload Icon */}
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto text-gray-400 dark:text-gray-500 mb-2 transition-colors duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1}>
                          <path strokeLinecap="round" strokeLinejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                        </svg>
                        <p className="font-semibold">{isDragging ? 'Drop image here' : 'Click or drag & drop image'}</p>
                        <p className="text-xs mt-1">({ACCEPTED_FORMATS.map(f => f.split('/')[1].toUpperCase()).join(', ')} up to {MAX_FILE_SIZE_MB}MB)</p>
                     </div>
                   )}
                 </div>
                 {/* Clear/Replace Button - More prominent, centered on hover */}
                 {uploadedImageData && (
                    <button
                        onClick={handleClearUpload}
                        className="absolute top-2 right-2 z-10 p-1.5 bg-black dark:bg-white bg-opacity-30 dark:bg-opacity-20 hover:bg-opacity-50 dark:hover:bg-opacity-30 text-white dark:text-gray-200 rounded-full opacity-0 group-hover:opacity-100 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 dark:focus:ring-red-400 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
                        aria-label="Clear uploaded image"
                    >
                         {/* Using a smaller trash icon */}
                         <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                           <path strokeLinecap="round" strokeLinejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                         </svg>
                    </button>
                 )}
                 {/* Upload Error Display - Positioned at the bottom */}
                 {uploadError && (
                    <div className="absolute bottom-2 left-2 right-2 p-1 bg-red-100 dark:bg-red-900/30 border border-red-400 dark:border-red-800 text-red-700 dark:text-red-300 text-xs rounded text-center transition-colors duration-200">
                        {uploadError}
                    </div>
                  )}
              </div>

              {/* Generated Image Area & Prompt */}
              <div className="border border-gray-200 dark:border-gray-700 rounded p-4 flex flex-col items-center justify-start bg-gray-50 dark:bg-gray-800 relative h-full transition-colors duration-200">
                 <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-3 w-full text-center transition-colors duration-200">Generated</h3>
                 {/* Image container */}
                 <div className="relative w-full flex-grow flex items-center justify-center overflow-hidden p-1">
                    <LoadingIndicator isActive={isLoading} /> {/* Overlay */}
                    {/* ImageViewer handles its own placeholder */}
                    <ImageViewer imageUrl={generatedImageRelativePath ? `${API_BASE_URL}${generatedImageRelativePath}` : null} isLoading={isLoading} />
                 </div>
                 {/* Prompt Display Area - Conditionally render below image */}
                 {generatedPrompt && !isLoading && generatedImageRelativePath && (
                    <div className="w-full mt-3 pt-3 border-t border-gray-200 dark:border-gray-700 transition-colors duration-200">
                        <h4 className="text-sm font-medium text-gray-600 dark:text-gray-300 mb-1 px-1 transition-colors duration-200">Prompt Used:</h4>
                        <pre className="text-xs bg-white dark:bg-gray-900 p-2 rounded overflow-x-auto whitespace-pre-wrap break-words font-mono border border-gray-200 dark:border-gray-700 text-gray-800 dark:text-gray-300 transition-colors duration-200">
                            {generatedPrompt}
                        </pre>
                    </div>
                 )}
                 {/* Placeholder logic is now handled entirely by ImageViewer */}
              </div>
            </div>
             {/* Generation Error Message below the comparison area */}
            <div className="mt-4">
                <ErrorMessage message={errorMessage} onDismiss={handleDismissError} />
            </div>
          </section>

      </main>

      {/* Gallery Section */}
      <section className="p-4 sm:px-6 lg:px-8 mt-4 bg-white dark:bg-gray-800 rounded shadow transition-colors duration-200">
         <h2 className="text-xl font-semibold mb-3 border-b border-gray-200 dark:border-gray-700 pb-2 transition-colors duration-200">Recent Generations</h2>
         <Gallery
            imageUrls={galleryImageRelativePaths.map(relPath => `${API_BASE_URL}${relPath}`)}
            onThumbnailClick={handleThumbnailClick}
            onClearGallery={handleClearGallery}
         />
      </section>

      {/* Footer */}
      <footer className="text-center p-4 sm:px-6 lg:px-8 mt-4 text-sm text-gray-500 dark:text-gray-400 transition-colors duration-200">
        Fashion AI V1
      </footer>
    </div>
  );
}

export default App;
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/CollapsibleSection.tsx">
import React, { useState, ReactNode } from 'react';

interface CollapsibleSectionProps {
  title: string;
  children: ReactNode;
  defaultOpen?: boolean;
}

const CollapsibleSection: React.FC<CollapsibleSectionProps> = ({ 
  title, 
  children, 
  defaultOpen = false 
}) => {
  const [isOpen, setIsOpen] = useState<boolean>(defaultOpen);

  const toggleSection = () => {
    setIsOpen(!isOpen);
  };

  return (
    <div className="mb-4 border border-gray-200 dark:border-gray-700 rounded-md overflow-hidden transition-colors duration-200">
      <button
        type="button"
        onClick={toggleSection}
        className="w-full flex justify-between items-center p-3 text-left bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
        aria-expanded={isOpen}
      >
        <span className="font-medium text-gray-800 dark:text-gray-200 transition-colors duration-200">{title}</span>
        <svg
          className={`w-5 h-5 text-gray-500 dark:text-gray-400 transition-transform duration-200 ${isOpen ? 'transform rotate-180' : ''}`}
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>
      <div
        className={`overflow-hidden transition-all duration-200 ${
          isOpen ? 'max-h-screen opacity-100' : 'max-h-0 opacity-0'
        }`}
      >
        <div className="p-3 bg-white dark:bg-gray-800 transition-colors duration-200">
          {children}
        </div>
      </div>
    </div>
  );
};

export default CollapsibleSection;
</file>

<file path="src/components/EnvironmentSettings.tsx">
import React, { useState, useEffect } from 'react';
import CollapsibleSection from './CollapsibleSection';
import VisualOptionSelector, { VisualOption } from './VisualOptionSelector';

// Define options based on PRD (Section 3.3)
// Define mapping from display name to backend key
const BACKGROUND_PRESET_MAP: { [key: string]: string } = {
  'Studio - White': 'studio-white',
  'Studio - Gradient': 'studio-gradient',
  'In Store': 'in-store',
  'Lifestyle - Home': 'lifestyle-home',
  'Lifestyle - Office': 'lifestyle-office',
  'Outdoor - Urban': 'outdoor-urban',
  'Outdoor - Nature': 'outdoor-nature',
  'Seasonal - Spring': 'seasonal-spring',
  'Seasonal - Summer': 'seasonal-summer',
  'Seasonal - Fall': 'seasonal-fall',
  'Seasonal - Winter': 'seasonal-winter',
  // Add other mappings if needed, ensure keys match backend server.js
};
// Derive options from the map keys for the dropdown display
const BACKGROUND_PRESET_OPTIONS = Object.keys(BACKGROUND_PRESET_MAP);
const LIGHTING_OPTIONS = [
  'Studio Softbox',
  'Natural Daylight',
  'Golden Hour Sunlight',
  'Dramatic Rim Lighting',
  'Cinematic Moody',
];
const LENS_STYLE_OPTIONS = [
  'Fashion Magazine (Standard)',
  'Portrait (Shallow DoF)',
  'Wide Angle Environmental',
  'Cinematic Look',
];

// New environment options
const TIME_OF_DAY_OPTIONS = ['Morning', 'Noon', 'Afternoon', 'Sunset', 'Evening', 'Night'];
const WEATHER_OPTIONS = ['Clear', 'Sunny', 'Cloudy', 'Overcast', 'Rainy', 'Foggy', 'Snowy'];
const SEASON_OPTIONS = ['Spring', 'Summer', 'Fall', 'Winter'];
const CAMERA_ANGLE_OPTIONS = ['Eye Level', 'Low Angle', 'High Angle', 'Dutch Angle', 'Overhead'];

// Visual options for time of day
const TIME_OF_DAY_VISUAL_OPTIONS: VisualOption[] = TIME_OF_DAY_OPTIONS.map(time => ({
  value: time,
  label: time,
  // Icons would be added here in a real implementation
}));

// Visual options for weather
const WEATHER_VISUAL_OPTIONS: VisualOption[] = WEATHER_OPTIONS.map(weather => ({
  value: weather,
  label: weather,
  // Icons would be added here in a real implementation
}));

// Interface for the component's state
export interface EnvironmentSettingsState {
  backgroundPreset: string;
  backgroundCustom: string;
  lighting: string;
  lensStyle: string;
  timeOfDay: string;
  weather: string;
  season: string;
  cameraAngle: string;
}

// Interface for the component's props
interface EnvironmentSettingsProps {
  onChange: (settings: EnvironmentSettingsState) => void; // Callback to parent
}

const EnvironmentSettings: React.FC<EnvironmentSettingsProps> = ({ onChange }) => {
  // Initialize state with default values
  const [settings, setSettings] = useState<EnvironmentSettingsState>({
    // Default to the KEY of the first option in the map
    backgroundPreset: BACKGROUND_PRESET_MAP[BACKGROUND_PRESET_OPTIONS[0]] || '',
    backgroundCustom: '',
    lighting: LIGHTING_OPTIONS[0],
    lensStyle: LENS_STYLE_OPTIONS[0],
    timeOfDay: TIME_OF_DAY_OPTIONS[0],
    weather: WEATHER_OPTIONS[0],
    season: SEASON_OPTIONS[0],
    cameraAngle: CAMERA_ANGLE_OPTIONS[0],
  });

  // Notify parent component when settings change
  useEffect(() => {
    onChange(settings);
  }, [settings, onChange]);

  // Handle changes for dropdowns and text input
  const handleChange = (
    event: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>
  ) => {
    const { name, value } = event.target;

    setSettings(prevSettings => {
        const newSettings = { ...prevSettings };

        if (name === 'backgroundPreset') {
            // Directly store the selected key from the dropdown value
            newSettings.backgroundPreset = value;
            if (value !== '') {
                // Clear custom input if a preset key is selected
                newSettings.backgroundCustom = '';
            }
        } else if (name === 'backgroundCustom') {
            newSettings.backgroundCustom = value;
            if (value !== '') {
                // Clear preset key if custom text is entered
                newSettings.backgroundPreset = '';
            }
        } else {
            // Handle other fields (lighting, lensStyle, etc.)
            newSettings[name as keyof EnvironmentSettingsState] = value;
        }
        return newSettings;
    });
  };

  // Handler for visual option selectors
  const handleVisualOptionChange = (name: keyof EnvironmentSettingsState, value: string) => {
    setSettings(prevSettings => ({
      ...prevSettings,
      [name]: value,
    }));
  };

   // Helper function to render a dropdown
   const renderSelect = (
    name: keyof EnvironmentSettingsState,
    label: string,
    options: string[],
    // Optional: Add a placeholder option if needed for clearing selection
    // placeholder?: string
  ) => (
    <div className="mb-3">
      <label htmlFor={name} className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 transition-colors duration-200">
        {label}
      </label>
      {/* Added relative positioning to the wrapper */}
      <div className="relative mt-1">
        <select
          id={name}
          name={name}
          value={settings[name]}
          onChange={handleChange}
          // Add disabled state for backgroundPreset select
          disabled={name === 'backgroundPreset' && settings.backgroundCustom !== ''}
          // Updated classes for consistent styling and custom arrow
          className={`appearance-none block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 dark:focus:ring-primary-400 focus:border-primary-500 dark:focus:border-primary-400 sm:text-sm transition-colors duration-200 ${name === 'backgroundPreset' && settings.backgroundCustom !== '' ? 'disabled:bg-gray-100 dark:disabled:bg-gray-800 disabled:opacity-70 disabled:cursor-not-allowed' : ''}`}
        >
          {/* Add a placeholder option */}
          {name === 'backgroundPreset' ? (
             <>
               <option value="">-- Select Preset --</option>
               {BACKGROUND_PRESET_OPTIONS.map(displayName => (
                 <option key={displayName} value={BACKGROUND_PRESET_MAP[displayName]}> {/* Value is the KEY */}
                   {displayName} {/* Text is the display name */}
                 </option>
               ))}
             </>
          ) : (
             // Original options for other selects (lighting, lensStyle)
             options.map(option => (
               <option key={option} value={option}>
                 {option}
               </option>
             ))
          )}
        </select>
        {/* Custom dropdown arrow */}
        <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700 dark:text-gray-300 transition-colors duration-200">
          <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
            <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
          </svg>
        </div>
      </div>
    </div>
  );

  return (
    <div className="mb-4 space-y-4">
      <h3 className="text-lg font-medium leading-6 text-gray-900 dark:text-gray-100 mb-2 transition-colors duration-200">Environment Customization</h3>

      {/* Background Settings Section */}
      <CollapsibleSection title="Background Settings" defaultOpen={true}>
        <div className="space-y-3">
          {renderSelect('backgroundPreset', 'Preset', BACKGROUND_PRESET_OPTIONS)}

          <div>
            <label htmlFor="backgroundCustom" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 transition-colors duration-200">
              Custom Description
            </label>
            <input
              type="text"
              id="backgroundCustom"
              name="backgroundCustom"
              value={settings.backgroundCustom}
              onChange={handleChange}
              placeholder="e.g., 'Minimalist loft apartment'"
              className={`block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 dark:focus:ring-primary-400 focus:border-primary-500 dark:focus:border-primary-400 sm:text-sm transition-colors duration-200 ${settings.backgroundPreset !== '' ? 'disabled:bg-gray-100 dark:disabled:bg-gray-800 disabled:opacity-70 disabled:cursor-not-allowed' : ''}`}
              disabled={settings.backgroundPreset !== ''}
            />
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-1 transition-colors duration-200">If filled, this overrides the preset.</p>
          </div>

          {/* Season Selection */}
          {renderSelect('season', 'Season', SEASON_OPTIONS)}
        </div>
      </CollapsibleSection>

      {/* Atmospheric Conditions Section */}
      <CollapsibleSection title="Atmospheric Conditions">
        <div className="space-y-3">
          <VisualOptionSelector
            name="timeOfDay"
            label="Time of Day"
            options={TIME_OF_DAY_VISUAL_OPTIONS}
            selectedValue={settings.timeOfDay}
            onChange={(value) => handleVisualOptionChange('timeOfDay', value)}
          />

          <VisualOptionSelector
            name="weather"
            label="Weather"
            options={WEATHER_VISUAL_OPTIONS}
            selectedValue={settings.weather}
            onChange={(value) => handleVisualOptionChange('weather', value)}
          />

          {renderSelect('lighting', 'Lighting', LIGHTING_OPTIONS)}
        </div>
      </CollapsibleSection>

      {/* Camera Settings Section */}
      <CollapsibleSection title="Camera Settings">
        <div className="space-y-3">
          {renderSelect('lensStyle', 'Lens / Style', LENS_STYLE_OPTIONS)}
          {renderSelect('cameraAngle', 'Camera Angle', CAMERA_ANGLE_OPTIONS)}
        </div>
      </CollapsibleSection>
    </div>
  );
};

export default EnvironmentSettings;
</file>

<file path="src/components/ErrorMessage.tsx">
import React from 'react';

interface ErrorMessageProps {
  message: string | null; // The error message to display, or null to hide
  onDismiss?: () => void; // Optional callback to dismiss the error
}

const ErrorMessage: React.FC<ErrorMessageProps> = ({ message, onDismiss }) => {
  if (!message) {
    return null; // Don't render anything if no message
  }

  return (
    <div className="bg-red-100 dark:bg-red-900/30 border border-red-400 dark:border-red-800 text-red-700 dark:text-red-300 px-4 py-3 rounded relative mt-4 transition-colors duration-200 animate-fade-in" role="alert">
      <strong className="font-bold">Error: </strong>
      <span className="block sm:inline">{message}</span>
      {onDismiss && (
        <button
          onClick={onDismiss}
          className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-800 dark:hover:text-red-200 transition-colors"
          aria-label="Dismiss error"
        >
          <svg className="fill-current h-6 w-6 text-red-500 dark:text-red-400" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
            <title>Close</title>
            <path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/>
          </svg>
        </button>
      )}
    </div>
  );
};

export default ErrorMessage;
</file>

<file path="src/components/Gallery.tsx">
import React, { useState } from 'react';

interface GalleryProps {
  imageUrls: string[]; // List of image URLs from localStorage
  onThumbnailClick: (url: string) => void; // Callback when a thumbnail is clicked
  onClearGallery?: () => void; // Optional callback to clear the gallery
}

const Gallery: React.FC<GalleryProps> = ({ imageUrls, onThumbnailClick, onClearGallery }) => {
  const [clearConfirm, setClearConfirm] = useState<boolean>(false);

  const handleClearGallery = () => {
    // Show confirmation dialog
    setClearConfirm(true);
  };

  const handleConfirmClear = () => {
    // Call the parent component's clear function
    if (onClearGallery) {
      onClearGallery();
    }
    setClearConfirm(false);
  };

  const handleCancelClear = () => {
    setClearConfirm(false);
  };

  if (!imageUrls || imageUrls.length === 0) {
    return (
      <div className="text-center text-gray-500 dark:text-gray-400 py-4 transition-colors duration-200">
        No recent generations found in this browser session.
      </div>
    );
  }

  return (
    <div>
      {/* Mobile scrolling gallery */}
      <div className="block md:hidden overflow-x-auto py-2 scrollbar-thin scrollbar-thumb-gray-400 dark:scrollbar-thumb-gray-600 scrollbar-track-gray-200 dark:scrollbar-track-gray-700 transition-colors duration-200">
        <div className="inline-flex space-x-3">
          {imageUrls.map((url, index) => (
            <div
              key={`${url}-${index}`}
              className="flex-shrink-0 w-24 h-24 rounded border border-gray-300 dark:border-gray-600 overflow-hidden cursor-pointer hover:opacity-90 hover:border-primary-500 dark:hover:border-primary-400 transition-all duration-200 animate-fade-in"
              onClick={() => onThumbnailClick(url)}
            >
              <img
                src={url}
                alt={`Generated image ${index + 1}`}
                className="w-full h-full object-cover"
                loading="lazy"
              />
            </div>
          ))}
        </div>
      </div>

      {/* Desktop grid gallery */}
      <div className="hidden md:grid grid-cols-2 lg:grid-cols-4 xl:grid-cols-6 gap-3">
        {imageUrls.map((url, index) => (
          <div
            key={`${url}-${index}`}
            className="aspect-square rounded border border-gray-300 dark:border-gray-600 overflow-hidden cursor-pointer hover:opacity-90 hover:border-primary-500 dark:hover:border-primary-400 hover:shadow-md transition-all duration-200 animate-fade-in"
            onClick={() => onThumbnailClick(url)}
          >
            <img
              src={url}
              alt={`Generated image ${index + 1}`}
              className="w-full h-full object-cover"
              loading="lazy"
            />
          </div>
        ))}
      </div>

      {/* Gallery actions - only show if there are images and onClearGallery is provided */}
      {imageUrls.length > 0 && onClearGallery && (
        <div className="mt-4 flex justify-end">
          {clearConfirm ? (
            <div className="flex space-x-2 items-center animate-fade-in">
              <span className="text-sm text-gray-600 dark:text-gray-300">Clear all images?</span>
              <button
                className="text-sm px-2 py-1 bg-red-500 hover:bg-red-600 text-white rounded transition-colors"
                onClick={handleConfirmClear}
              >
                Yes
              </button>
              <button
                className="text-sm px-2 py-1 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 rounded transition-colors"
                onClick={handleCancelClear}
              >
                No
              </button>
            </div>
          ) : (
            <button
              className="text-sm text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
              onClick={handleClearGallery}
            >
              Clear Gallery
            </button>
          )}
        </div>
      )}
    </div>
  );
};

export default Gallery;
</file>

<file path="src/components/GenerationButton.tsx">
import React from 'react';

interface GenerationButtonProps {
  onClick: () => void; // Function to call when clicked
  isLoading: boolean; // Is the generation process running?
  isDisabled: boolean; // Should the button be disabled (e.g., no image uploaded)?
}

const GenerationButton: React.FC<GenerationButtonProps> = ({ onClick, isLoading, isDisabled }) => {
  const disabled = isLoading || isDisabled; // Button is disabled if loading OR explicitly disabled

  return (
    <button
      type="button"
      onClick={onClick}
      disabled={disabled}
      className={`w-full inline-flex justify-center items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white
                  ${disabled
                    ? 'bg-primary-300 dark:bg-primary-800 cursor-not-allowed'
                    : 'bg-primary-600 hover:bg-primary-700 dark:bg-primary-700 dark:hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 dark:focus:ring-primary-400 dark:focus:ring-offset-gray-800'
                  }
                  transition-all duration-200`}
    >
      {isLoading ? (
        <>
          <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Generating...
        </>
      ) : (
        'Generate Image'
      )}
    </button>
  );
};

export default GenerationButton;
</file>

<file path="src/components/ImageViewer.tsx">
import React from 'react';

interface ImageViewerProps {
  imageUrl: string | null; // URL of the image to display
  isLoading: boolean; // To potentially show a different state while loading the *display*
}

const ImageViewer: React.FC<ImageViewerProps> = ({ imageUrl, isLoading }) => {
  return (
    <div className="w-full h-full flex items-center justify-center bg-slate-50 dark:bg-gray-800 rounded min-h-[300px] md:min-h-[400px] lg:min-h-[500px] overflow-hidden transition-colors duration-200">
      {isLoading && !imageUrl && (
         <p className="text-gray-500 dark:text-gray-400 animate-pulse transition-colors duration-200">
           Loading image...
         </p>
      )}
      {!isLoading && imageUrl && (
        <img
          src={imageUrl}
          alt="Generated Fashion"
          className="max-w-full max-h-full object-contain animate-fade-in"
        />
      )}
      {!isLoading && !imageUrl && (
        <p className="text-gray-500 dark:text-gray-400 text-center px-4 transition-colors duration-200">
          Upload an image and configure settings to generate a new fashion visual.
        </p>
      )}
    </div>
  );
};

export default ImageViewer;
</file>

<file path="src/components/LoadingIndicator.tsx">
import React from 'react';

interface LoadingIndicatorProps {
  isActive: boolean; // Controls visibility
  message?: string; // Optional message
}

const LoadingIndicator: React.FC<LoadingIndicatorProps> = ({ isActive, message = "Generating image, please wait..." }) => {
  if (!isActive) {
    return null; // Don't render anything if not active
  }

  return (
    <div className="absolute inset-0 bg-white dark:bg-gray-900 bg-opacity-75 dark:bg-opacity-75 flex flex-col items-center justify-center z-10 transition-colors duration-200">
      {/* Reusing the spinner SVG */}
      <svg className="animate-spin h-8 w-8 text-primary-600 dark:text-primary-400 mb-2 transition-colors duration-200" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <p className="text-primary-600 dark:text-primary-400 font-medium transition-colors duration-200">{message}</p>
    </div>
  );
};

export default LoadingIndicator;
</file>

<file path="src/components/ModelSettings.tsx">
import React, { useState, useEffect } from 'react';
import CollapsibleSection from './CollapsibleSection';
import VisualOptionSelector, { VisualOption } from './VisualOptionSelector';

// Define options based on PRD (Section 3.2)
const GENDER_OPTIONS = ['Female', 'Male', 'Androgynous'];
const BODY_TYPE_OPTIONS = ['Slim', 'Average', 'Athletic', 'Curvy', 'Plus-size'];
const AGE_RANGE_OPTIONS = ['18-25', '26-35', '36-45', '46-55', '55+'];
const ETHNICITY_OPTIONS = [
  'Caucasian',
  'Black/African Descent',
  'East Asian',
  'South Asian',
  'Hispanic/Latino',
  'Middle Eastern',
  'Mixed-race',
];

// New options for enhanced customization
const HAIR_STYLE_OPTIONS = ['Short', 'Medium', 'Long', 'Curly', 'Straight', 'Wavy', 'Braided', 'Bun', 'Ponytail'];
const HAIR_COLOR_OPTIONS = ['Black', 'Brown', 'Blonde', 'Red', 'Gray', 'White', 'Colorful'];
const HEIGHT_OPTIONS = ['Short', 'Average', 'Tall'];
const POSE_OPTIONS = ['Standing', 'Sitting', 'Walking', 'Casual Pose', 'Fashion Pose'];
const ACCESSORIES_OPTIONS = ['None', 'Glasses', 'Jewelry', 'Hat', 'Scarf', 'Multiple'];

// Visual options for hair styles
const HAIR_STYLE_VISUAL_OPTIONS: VisualOption[] = HAIR_STYLE_OPTIONS.map(style => ({
  value: style,
  label: style,
  // Icons would be added here in a real implementation
}));

// Visual options for hair colors
const HAIR_COLOR_VISUAL_OPTIONS: VisualOption[] = HAIR_COLOR_OPTIONS.map(color => ({
  value: color,
  label: color,
  // In a real implementation, we would use colored circles or icons
}));

// Interface for the component's state
export interface ModelSettingsState {
  gender: string;
  bodyType: string;
  ageRange: string;
  ethnicity: string;
  hairStyle: string;
  hairColor: string;
  height: string;
  pose: string;
  accessories: string;
}

// Interface for the component's props
interface ModelSettingsProps {
  onChange: (settings: ModelSettingsState) => void; // Callback to parent
}

const ModelSettings: React.FC<ModelSettingsProps> = ({ onChange }) => {
  // Initialize state with default values (first option)
  const [settings, setSettings] = useState<ModelSettingsState>({
    gender: GENDER_OPTIONS[0],
    bodyType: BODY_TYPE_OPTIONS[0],
    ageRange: AGE_RANGE_OPTIONS[0],
    ethnicity: ETHNICITY_OPTIONS[0],
    hairStyle: HAIR_STYLE_OPTIONS[0],
    hairColor: HAIR_COLOR_OPTIONS[0],
    height: HEIGHT_OPTIONS[1], // Default to 'Average'
    pose: POSE_OPTIONS[0],
    accessories: ACCESSORIES_OPTIONS[0],
  });

  // Notify parent component when settings change
  useEffect(() => {
    onChange(settings);
  }, [settings, onChange]);

  // Generic handler for dropdown changes
  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const { name, value } = event.target;
    setSettings(prevSettings => ({
      ...prevSettings,
      [name]: value,
    }));
  };

  // Handler for visual option selectors
  const handleVisualOptionChange = (name: keyof ModelSettingsState, value: string) => {
    setSettings(prevSettings => ({
      ...prevSettings,
      [name]: value,
    }));
  };

  // Helper function to render a dropdown
  const renderSelect = (
    name: keyof ModelSettingsState,
    label: string,
    options: string[]
  ) => (
    <div className="mb-3">
      <label htmlFor={name} className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 transition-colors duration-200">
        {label}
      </label>
      {/* Added relative positioning to the wrapper */}
      <div className="relative mt-1">
        <select
          id={name}
          name={name}
          value={settings[name]}
          onChange={handleChange}
          className="appearance-none block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 dark:focus:ring-primary-400 focus:border-primary-500 dark:focus:border-primary-400 sm:text-sm transition-colors duration-200"
        >
          {options.map(option => (
            <option key={option} value={option}>
              {option}
            </option>
          ))}
        </select>
        {/* Custom dropdown arrow */}
        <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700 dark:text-gray-300 transition-colors duration-200">
          <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
            <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
          </svg>
        </div>
      </div>
    </div>
  );

  return (
    <div className="mb-4 space-y-4">
      <h3 className="text-lg font-medium leading-6 text-gray-900 dark:text-gray-100 mb-2 transition-colors duration-200">Model Customization</h3>

      {/* Basic Characteristics Section */}
      <CollapsibleSection title="Basic Characteristics" defaultOpen={true}>
        <div className="space-y-3">
          {renderSelect('gender', 'Gender', GENDER_OPTIONS)}
          {renderSelect('bodyType', 'Body Type', BODY_TYPE_OPTIONS)}
          {renderSelect('ageRange', 'Age Range', AGE_RANGE_OPTIONS)}
          {renderSelect('ethnicity', 'Ethnicity', ETHNICITY_OPTIONS)}
          {renderSelect('height', 'Height', HEIGHT_OPTIONS)}
        </div>
      </CollapsibleSection>

      {/* Hair & Appearance Section */}
      <CollapsibleSection title="Hair & Appearance">
        <div className="space-y-3">
          <VisualOptionSelector
            name="hairStyle"
            label="Hair Style"
            options={HAIR_STYLE_VISUAL_OPTIONS}
            selectedValue={settings.hairStyle}
            onChange={(value) => handleVisualOptionChange('hairStyle', value)}
          />
          <VisualOptionSelector
            name="hairColor"
            label="Hair Color"
            options={HAIR_COLOR_VISUAL_OPTIONS}
            selectedValue={settings.hairColor}
            onChange={(value) => handleVisualOptionChange('hairColor', value)}
          />
        </div>
      </CollapsibleSection>

      {/* Additional Options Section */}
      <CollapsibleSection title="Additional Options">
        <div className="space-y-3">
          {renderSelect('pose', 'Pose', POSE_OPTIONS)}
          {renderSelect('accessories', 'Accessories', ACCESSORIES_OPTIONS)}
        </div>
      </CollapsibleSection>
    </div>
  );
};

export default ModelSettings;
</file>

<file path="src/components/ThemeToggle.tsx">
import React, { useEffect, useState } from 'react';
import { initializeTheme, toggleDarkMode } from '../utils/themeUtils';

const ThemeToggle: React.FC = () => {
  const [isDarkMode, setIsDarkMode] = useState<boolean>(false);

  // Initialize theme on component mount
  useEffect(() => {
    const darkModeEnabled = initializeTheme();
    setIsDarkMode(darkModeEnabled);
  }, []);

  const handleToggle = () => {
    const newMode = !isDarkMode;
    setIsDarkMode(newMode);
    toggleDarkMode(newMode);
  };

  return (
    <button
      onClick={handleToggle}
      className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
      aria-label={isDarkMode ? "Switch to light mode" : "Switch to dark mode"}
    >
      {isDarkMode ? (
        // Sun icon for light mode
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          className="h-5 w-5 text-yellow-400" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path 
            strokeLinecap="round" 
            strokeLinejoin="round" 
            strokeWidth={2} 
            d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" 
          />
        </svg>
      ) : (
        // Moon icon for dark mode
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          className="h-5 w-5 text-gray-700" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path 
            strokeLinecap="round" 
            strokeLinejoin="round" 
            strokeWidth={2} 
            d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" 
          />
        </svg>
      )}
    </button>
  );
};

export default ThemeToggle;
</file>

<file path="src/components/VisualOptionSelector.tsx">
import React from 'react';

export interface VisualOption {
  value: string;
  label: string;
  icon?: React.ReactNode;
  description?: string;
}

interface VisualOptionSelectorProps {
  options: VisualOption[];
  selectedValue: string;
  onChange: (value: string) => void;
  name: string;
  label: string;
}

const VisualOptionSelector: React.FC<VisualOptionSelectorProps> = ({
  options,
  selectedValue,
  onChange,
  name,
  label,
}) => {
  const handleChange = (value: string) => {
    onChange(value);
  };

  return (
    <div className="mb-3">
      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-200">
        {label}
      </label>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2">
        {options.map((option) => (
          <button
            key={option.value}
            type="button"
            onClick={() => handleChange(option.value)}
            className={`flex flex-col items-center p-2 rounded-md border transition-all duration-200 ${
              selectedValue === option.value
                ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/30 ring-2 ring-primary-500 dark:ring-primary-400'
                : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600 bg-white dark:bg-gray-800'
            }`}
            aria-pressed={selectedValue === option.value}
            aria-label={option.label}
          >
            <div className="w-10 h-10 flex items-center justify-center text-gray-700 dark:text-gray-300 mb-1">
              {option.icon || (
                <div className="w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center">
                  {option.label.charAt(0)}
                </div>
              )}
            </div>
            <span className="text-xs font-medium text-gray-800 dark:text-gray-200">
              {option.label}
            </span>
          </button>
        ))}
      </div>
    </div>
  );
};

export default VisualOptionSelector;
</file>

<file path="src/index.css">
@import "tailwindcss";

/* Base styles */
@layer base {
  body {
    @apply antialiased;
  }

  /* Smooth transitions for dark mode */
  html.dark {
    color-scheme: dark;
  }

  /* Custom scrollbar styles */
  ::-webkit-scrollbar {
    @apply w-2 h-2;
  }

  ::-webkit-scrollbar-track {
    @apply bg-gray-100 dark:bg-gray-800;
  }

  ::-webkit-scrollbar-thumb {
    @apply bg-gray-300 dark:bg-gray-600 rounded hover:bg-gray-400 dark:hover:bg-gray-500;
  }
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/services/api.ts">
import { ModelSettingsState } from '../components/ModelSettings';
import { EnvironmentSettingsState } from '../components/EnvironmentSettings';

// Define the expected structure of the backend request payload
interface GenerateApiPayload {
  settings: {
    modelSettings: ModelSettingsState;
    environmentSettings: EnvironmentSettingsState;
  };
  imageData: string; // Base64 data URI
}

// Define the expected structure of a successful backend response
interface GenerateApiSuccessResponse {
  success: true;
  imageUrl: string;
  promptUsed: string; // Add prompt field
}

// Define the expected structure of a failed backend response
interface GenerateApiErrorResponse {
  success: false;
  message: string;
}

// Type guard to check for success response
function isSuccessResponse(response: unknown): response is GenerateApiSuccessResponse {
    return typeof response === 'object' && response !== null &&
           'success' in response && response.success === true &&
           'imageUrl' in response && typeof response.imageUrl === 'string' &&
           'promptUsed' in response && typeof response.promptUsed === 'string'; // Check for prompt field
}

// Type guard to check for error response
function isErrorResponse(response: unknown): response is GenerateApiErrorResponse {
    return typeof response === 'object' && response !== null &&
           'success' in response && response.success === false &&
           'message' in response && typeof response.message === 'string';
}


// Get the backend URL from environment variables (Vite specific)
// Fallback to localhost for local development
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001';

/**
 * Calls the backend API to generate an image.
 * @param payload - The settings and image data.
 * @returns The URL of the generated image.
 * @throws An error with a message if the API call fails or returns an error.
 */
export const generateImage = async (payload: GenerateApiPayload): Promise<{ imageUrl: string, promptUsed: string }> => {
  const apiUrl = `${API_BASE_URL}/generate`;
  console.log(`Sending request to: ${apiUrl}`);

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    // Check if the response status code indicates an error
    if (!response.ok) {
      // Try to parse error message from backend if available
      let errorMessage = `API request failed with status ${response.status}`;
      try {
        const errorData = await response.json();
        if (isErrorResponse(errorData)) {
          errorMessage = errorData.message;
        }
      } catch (parseError) {
        // Ignore if response body is not JSON or empty
        console.error("Could not parse error response body:", parseError);
      }
      throw new Error(errorMessage);
    }

    // Parse the successful JSON response
    const data = await response.json();

    // Validate the success response structure
    if (isSuccessResponse(data)) {
      // Return the object containing both URL and prompt
      return { imageUrl: data.imageUrl, promptUsed: data.promptUsed };
    } else {
      // Handle cases where the status code was ok, but the body is unexpected
      console.error("Unexpected successful response format:", data);
      throw new Error('Received an unexpected response format from the server.');
    }

  } catch (error) {
    console.error('Error calling generate API:', error);
    // Re-throw the error to be caught by the calling component
    // If it's already an Error object, re-throw it, otherwise wrap it
    if (error instanceof Error) {
        throw error;
    } else {
        throw new Error('An unknown error occurred during the API call.');
    }
  }
};
</file>

<file path="src/utils/themeUtils.ts">
/**
 * Theme utility functions for managing dark mode
 */

/**
 * Toggle dark mode on or off
 * @param isDark - Whether to enable dark mode
 */
export const toggleDarkMode = (isDark: boolean) => {
  if (isDark) {
    document.documentElement.classList.add('dark');
    localStorage.setItem('theme', 'dark');
  } else {
    document.documentElement.classList.remove('dark');
    localStorage.setItem('theme', 'light');
  }
};

/**
 * Initialize theme based on user preference or system setting
 * @returns boolean - Whether dark mode is enabled
 */
export const initializeTheme = (): boolean => {
  // Check for user preference
  const savedTheme = localStorage.getItem('theme');
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  
  if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
    toggleDarkMode(true);
    return true;
  }
  
  toggleDarkMode(false);
  return false;
};
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="tailwind.config.js">
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}", // Include TS/TSX files
  ],
  darkMode: 'class', // Enable dark mode with class strategy
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eef2ff',
          100: '#e0e7ff',
          200: '#c7d2fe',
          300: '#a5b4fc',
          400: '#818cf8',
          500: '#6366f1',
          600: '#4f46e5', // Primary color
          700: '#4338ca',
          800: '#3730a3',
          900: '#312e81',
          950: '#1e1b4b',
        },
        secondary: {
          50: '#ecfdf5',
          100: '#d1fae5',
          200: '#a7f3d0',
          300: '#6ee7b7',
          400: '#34d399',
          500: '#10b981', // Secondary color
          600: '#059669',
          700: '#047857',
          800: '#065f46',
          900: '#064e3b',
          950: '#022c22',
        },
        accent: {
          50: '#fffbeb',
          100: '#fef3c7',
          200: '#fde68a',
          300: '#fcd34d',
          400: '#fbbf24',
          500: '#f59e0b', // Accent color
          600: '#d97706',
          700: '#b45309',
          800: '#92400e',
          900: '#78350f',
          950: '#451a03',
        },
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
      },
    },
  },
  plugins: [],
}
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    react(),
    tailwindcss(),
  ],
})
</file>

</files>
